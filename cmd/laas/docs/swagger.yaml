basePath: /api/v1
definitions:
  datatypes.JSONType-models_LicenseDBSchemaExtension:
    type: object
  models.APICollection:
    properties:
      authenticated:
        type: object
      unAuthenticated:
        type: object
    type: object
  models.APICollectionResponse:
    properties:
      data:
        $ref: '#/definitions/models.APICollection'
      status:
        example: 200
        type: integer
    type: object
  models.Audit:
    properties:
      entity:
        type: object
      id:
        example: 456
        type: integer
      timestamp:
        example: "2023-12-01T18:10:25.00+05:30"
        type: string
      type:
        enum:
        - obligation
        - license
        example: license
        type: string
      type_id:
        example: 34
        type: integer
      user:
        $ref: '#/definitions/models.User'
      user_id:
        example: 123
        type: integer
    type: object
  models.AuditResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Audit'
        type: array
      paginationmeta:
        $ref: '#/definitions/models.PaginationMeta'
      status:
        example: 200
        type: integer
    type: object
  models.CategoryObligationCount:
    properties:
      category:
        example: GENERAL
        type: string
      count:
        example: 6
        type: integer
    type: object
  models.ChangeLog:
    properties:
      audit_id:
        example: 456
        type: integer
      field:
        example: text
        type: string
      id:
        example: 789
        type: integer
      old_value:
        example: Old license text
        type: string
      updated_value:
        example: New license text
        type: string
    type: object
  models.ChangeLogResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.ChangeLog'
        type: array
      paginationmeta:
        $ref: '#/definitions/models.PaginationMeta'
      status:
        example: 200
        type: integer
    type: object
  models.Dashboard:
    properties:
      category_obligation_frequency:
        items:
          $ref: '#/definitions/models.CategoryObligationCount'
        type: array
      licenses_count:
        example: 2
        type: integer
      monthly_license_changes_count:
        example: 6
        type: integer
      obligations_count:
        example: 7
        type: integer
      risk_license_frequency:
        items:
          $ref: '#/definitions/models.RiskLicenseCount'
        type: array
      users_count:
        example: 5
        type: integer
    type: object
  models.DashboardResponse:
    properties:
      data:
        $ref: '#/definitions/models.Dashboard'
      status:
        example: 200
        type: integer
    type: object
  models.ImportLicensesResponse:
    properties:
      data:
        description: can be of type models.LicenseError or models.LicenseImportStatus
        items: {}
        type: array
      status:
        example: 200
        type: integer
    type: object
  models.ImportObligationsResponse:
    properties:
      data:
        description: can be of type models.LicenseError or models.ObligationImportStatus
        items: {}
        type: array
      status:
        example: 200
        type: integer
    type: object
  models.LicenseDB:
    properties:
      FSFfree:
        type: boolean
      Fedora:
        type: string
      GPLv2compatible:
        type: boolean
      GPLv3compatible:
        type: boolean
      OSIapproved:
        type: boolean
      active:
        type: boolean
      add_date:
        example: "2023-12-01T18:10:25.00+05:30"
        type: string
      copyleft:
        type: boolean
      detector_type:
        example: 1
        maximum: 2
        minimum: 0
        type: integer
      external_ref:
        $ref: '#/definitions/datatypes.JSONType-models_LicenseDBSchemaExtension'
      flag:
        example: 1
        maximum: 2
        minimum: 0
        type: integer
      fullname:
        example: MIT License
        type: string
      marydone:
        type: boolean
      notes:
        example: This license has been superseded.
        type: string
      obligations:
        items:
          $ref: '#/definitions/models.Obligation'
        type: array
      risk:
        maximum: 5
        minimum: 0
        type: integer
      shortname:
        example: MIT
        type: string
      source:
        type: string
      spdx_id:
        example: MIT
        type: string
      text:
        example: MIT License Text here
        type: string
      text_updatable:
        type: boolean
      url:
        example: https://opensource.org/licenses/MIT
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Reference to User
    required:
    - fullname
    - shortname
    - spdx_id
    - text
    type: object
  models.LicenseError:
    properties:
      error:
        example: invalid request body
        type: string
      message:
        example: invalid request body
        type: string
      path:
        example: /api/v1/licenses
        type: string
      status:
        example: 400
        type: integer
      timestamp:
        example: "2023-12-01T10:00:51+05:30"
        type: string
    type: object
  models.LicenseId:
    properties:
      shortname:
        example: MIT
        type: string
    type: object
  models.LicenseImportStatus:
    properties:
      data:
        $ref: '#/definitions/models.LicenseId'
      status:
        example: 200
        type: integer
    type: object
  models.LicenseMapShortnamesElement:
    properties:
      add:
        example: true
        type: boolean
      shortname:
        example: GPL-2.0-only
        type: string
    type: object
  models.LicenseMapShortnamesInput:
    properties:
      map:
        items:
          $ref: '#/definitions/models.LicenseMapShortnamesElement'
        type: array
    type: object
  models.LicensePreviewResponse:
    properties:
      shortnames:
        example:
        - GPL-2.0-only
        - GPL-2.0-or-later
        items:
          type: string
        type: array
      status:
        example: 200
        type: integer
    type: object
  models.LicenseResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.LicenseDB'
        type: array
      paginationmeta:
        $ref: '#/definitions/models.PaginationMeta'
      status:
        example: 200
        type: integer
    type: object
  models.LicenseShortnamesInput:
    properties:
      shortnames:
        example:
        - GPL-2.0-only
        - GPL-2.0-or-later
        items:
          type: string
        type: array
    type: object
  models.Obligation:
    properties:
      active:
        type: boolean
      category:
        enum:
        - DISTRIBUTION
        - PATENT
        - INTERNAL
        - CONTRACTUAL
        - EXPORT_CONTROL
        - GENERAL
        example: DISTRIBUTION
        type: string
      classification:
        $ref: '#/definitions/models.ObligationClassification'
      comment:
        type: string
      id:
        type: integer
      licenses:
        items:
          $ref: '#/definitions/models.LicenseDB'
        type: array
      md5:
        type: string
      modifications:
        type: boolean
      obligationClassificationId:
        type: integer
      obligationTypeId:
        type: integer
      text:
        type: string
      textUpdatable:
        type: boolean
      topic:
        type: string
      type:
        $ref: '#/definitions/models.ObligationType'
    type: object
  models.ObligationClassification:
    properties:
      classification:
        example: GREEN
        type: string
      color:
        example: '#00FF00'
        type: string
    required:
    - classification
    - color
    type: object
  models.ObligationClassificationResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.ObligationClassification'
        type: array
      paginationmeta:
        $ref: '#/definitions/models.PaginationMeta'
      status:
        example: 200
        type: integer
    type: object
  models.ObligationDTO:
    properties:
      active:
        type: boolean
      category:
        example: DISTRIBUTION
        type: string
      classification:
        example: GREEN
        type: string
      comment:
        type: string
      modifications:
        example: true
        type: boolean
      shortnames:
        example:
        - GPL-2.0-only
        - GPL-2.0-or-later
        items:
          type: string
        type: array
      text:
        example: Source code be made available when distributing the software.
        type: string
      text_updatable:
        example: true
        type: boolean
      topic:
        example: copyleft
        type: string
      type:
        example: RISK
        type: string
    required:
    - category
    - classification
    - shortnames
    - text
    - topic
    - type
    type: object
  models.ObligationId:
    properties:
      id:
        example: 31
        type: integer
      topic:
        example: copyleft
        type: string
    type: object
  models.ObligationImportStatus:
    properties:
      data:
        $ref: '#/definitions/models.ObligationId'
      message:
        type: string
      status:
        example: 200
        type: integer
    type: object
  models.ObligationMapResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.ObligationMapUser'
        type: array
      paginationmeta:
        $ref: '#/definitions/models.PaginationMeta'
      status:
        example: 200
        type: integer
    type: object
  models.ObligationMapUser:
    properties:
      shortnames:
        example:
        - GPL-2.0-only
        - GPL-2.0-or-later
        items:
          type: string
        type: array
      topic:
        example: copyleft
        type: string
      type:
        enum:
        - obligation
        - restriction
        - risk
        - right
        example: obligation
        type: string
    type: object
  models.ObligationPreview:
    properties:
      topic:
        example: Provide Copyright Notices
        type: string
      type:
        enum:
        - obligation
        - restriction
        - risk
        - right
        type: string
    type: object
  models.ObligationPreviewResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.ObligationPreview'
        type: array
      status:
        example: 200
        type: integer
    type: object
  models.ObligationType:
    properties:
      type:
        example: PERMISSION
        type: string
    required:
    - type
    type: object
  models.ObligationTypeResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.ObligationType'
        type: array
      paginationmeta:
        $ref: '#/definitions/models.PaginationMeta'
      status:
        example: 200
        type: integer
    type: object
  models.ObligationUpdateDTO:
    properties:
      active:
        type: boolean
      category:
        example: DISTRIBUTION
        type: string
      classification:
        example: GREEN
        type: string
      comment:
        type: string
      modifications:
        example: true
        type: boolean
      text:
        example: Source code be made available when distributing the software.
        type: string
      text_updatable:
        example: true
        type: boolean
      type:
        example: RISK
        type: string
    type: object
  models.PaginationMeta:
    properties:
      limit:
        example: 10
        type: integer
      next:
        example: /api/v1/licenses?limit=10&page=11
        type: string
      page:
        example: 10
        type: integer
      previous:
        example: /api/v1/licenses?limit=10&page=9
        type: string
      resource_count:
        example: 200
        type: integer
      total_pages:
        example: 20
        type: integer
    type: object
  models.ProfileUpdate:
    properties:
      display_name:
        example: fossy
        type: string
      user_email:
        type: string
      user_password:
        type: string
    type: object
  models.RiskLicenseCount:
    properties:
      count:
        example: 6
        type: integer
      risk:
        example: 2
        type: integer
    type: object
  models.SearchLicense:
    properties:
      field:
        example: text
        type: string
      search:
        enum:
        - fuzzy
        - full_text_search
        type: string
      search_term:
        example: MIT License
        type: string
    required:
    - field
    - search_term
    type: object
  models.SwaggerObligationResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.ObligationDTO'
        type: array
      paginationmeta:
        $ref: '#/definitions/models.PaginationMeta'
      status:
        example: 200
        type: integer
    type: object
  models.User:
    properties:
      display_name:
        example: fossy
        type: string
      id:
        example: 123
        type: integer
      user_email:
        example: fossy@org.com
        type: string
      user_level:
        example: USER
        type: string
      username:
        example: fossy
        type: string
    type: object
  models.UserCreate:
    properties:
      display_name:
        example: fossy
        type: string
      user_email:
        example: fossy@org.com
        type: string
      user_level:
        enum:
        - USER
        - ADMIN
        example: ADMIN
        type: string
      user_password:
        example: fossy
        type: string
      username:
        example: fossy
        type: string
    required:
    - display_name
    - user_email
    - user_level
    - username
    type: object
  models.UserLogin:
    properties:
      password:
        example: fossy
        type: string
      username:
        example: fossy
        type: string
    required:
    - password
    - username
    type: object
  models.UserResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.User'
        type: array
      paginationmeta:
        $ref: '#/definitions/models.PaginationMeta'
      status:
        example: 200
        type: integer
    type: object
  models.UserUpdate:
    properties:
      active:
        type: boolean
      display_name:
        example: fossy
        type: string
      user_email:
        type: string
      user_level:
        enum:
        - USER
        - ADMIN
        example: ADMIN
        type: string
      user_password:
        type: string
      username:
        example: fossy
        type: string
    type: object
info:
  contact:
    email: fossology@fossology.org
    name: FOSSology
    url: https://fossology.org
  description: Service to host license information for other services to query over
    REST API.
  license:
    name: GPL-2.0-only
    url: https://github.com/fossology/LicenseDb/blob/main/LICENSE
  title: laas (License as a Service) API
  version: 0.0.9
paths:
  /apiCollection:
    get:
      consumes:
      - application/json
      description: Returns the apis which require authentication and which do not
      operationId: getAPICollection
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APICollectionResponse'
        "500":
          description: Unable to parse swagger docs
          schema:
            $ref: '#/definitions/models.LicenseError'
      summary: Returns the apis which require authentication and which do not
      tags:
      - API Collection
  /audits:
    get:
      consumes:
      - application/json
      description: Get all audit records from the server
      operationId: GetAllAudit
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of records per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Audit records
          schema:
            $ref: '#/definitions/models.AuditResponse'
        "404":
          description: Not changelogs in DB
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - '{}': []
        ApiKeyAuth: []
      summary: Get audit records
      tags:
      - Audits
  /audits/{audit_id}:
    get:
      consumes:
      - application/json
      description: Get a specific audit records by ID
      operationId: GetAudit
      parameters:
      - description: Audit ID
        in: path
        name: audit_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuditResponse'
        "400":
          description: Invalid audit ID
          schema:
            $ref: '#/definitions/models.LicenseError'
        "404":
          description: No audit entry with given ID
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - '{}': []
        ApiKeyAuth: []
      summary: Get an audit record
      tags:
      - Audits
  /audits/{audit_id}/changes:
    get:
      consumes:
      - application/json
      description: Get changelogs of an audit record
      operationId: GetChangeLogs
      parameters:
      - description: Audit ID
        in: path
        name: audit_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ChangeLogResponse'
        "400":
          description: Invalid audit ID
          schema:
            $ref: '#/definitions/models.LicenseError'
        "404":
          description: No audit entry with given ID
          schema:
            $ref: '#/definitions/models.LicenseError'
        "500":
          description: unable to find changes
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - '{}': []
        ApiKeyAuth: []
      summary: Get changelogs
      tags:
      - Audits
  /audits/{audit_id}/changes/{id}:
    get:
      consumes:
      - application/json
      description: Get a specific changelog of an audit record by its ID
      operationId: GetChangeLogbyId
      parameters:
      - description: Audit ID
        in: path
        name: audit_id
        required: true
        type: string
      - description: Changelog ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ChangeLogResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/models.LicenseError'
        "404":
          description: No changelog with given ID found
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - '{}': []
        ApiKeyAuth: []
      summary: Get a changelog
      tags:
      - Audits
  /dashboard:
    get:
      consumes:
      - application/json
      description: Fetches data to be displayed on the dashboard
      operationId: GetDashboardData
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DashboardResponse'
        "500":
          description: Something went wrong
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - '{}': []
        ApiKeyAuth: []
      summary: Fetches data to be displayed on the dashboard
      tags:
      - Dashboard
  /health:
    get:
      consumes:
      - application/json
      description: Check health of the service
      operationId: getHealth
      produces:
      - application/json
      responses:
        "200":
          description: Heath is OK
          schema:
            $ref: '#/definitions/models.LicenseError'
        "500":
          description: Connection to DB failed
          schema:
            $ref: '#/definitions/models.LicenseError'
      summary: Check health
      tags:
      - Health
  /licenses:
    get:
      consumes:
      - application/json
      description: Filter licenses based on different parameters
      operationId: FilterLicense
      parameters:
      - description: SPDX ID of the license
        in: query
        name: spdxid
        type: string
      - description: License detector type
        in: query
        name: detector_type
        type: integer
      - description: GPLv2 compatibility flag status of license
        in: query
        name: gplv2compatible
        type: boolean
      - description: GPLv3 compatibility flag status of license
        in: query
        name: gplv3compatible
        type: boolean
      - description: Mary done flag status of license
        in: query
        name: marydone
        type: boolean
      - description: Active license only
        in: query
        name: active
        type: boolean
      - description: OSI Approved flag status of license
        in: query
        name: osiapproved
        type: boolean
      - description: FSF Free flag status of license
        in: query
        name: fsffree
        type: boolean
      - description: Copyleft flag status of license
        in: query
        name: copyleft
        type: boolean
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit of responses per page
        in: query
        name: limit
        type: integer
      - description: External reference parameters
        in: query
        name: externalRef
        type: string
      - default: shortname
        description: Sort by field
        enum:
        - spdx_id
        - shortname
        - fullname
        in: query
        name: sort_by
        type: string
      - default: asc
        description: Asc or desc ordering
        enum:
        - asc
        - desc
        in: query
        name: order_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Filtered licenses
          schema:
            $ref: '#/definitions/models.LicenseResponse'
        "400":
          description: Invalid value
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - '{}': []
        ApiKeyAuth: []
      summary: Filter licenses
      tags:
      - Licenses
    post:
      consumes:
      - application/json
      description: Create a new license in the service
      operationId: CreateLicense
      parameters:
      - description: New license to be created
        in: body
        name: license
        required: true
        schema:
          $ref: '#/definitions/models.LicenseDB'
      produces:
      - application/json
      responses:
        "201":
          description: New license created successfully
          schema:
            $ref: '#/definitions/models.LicenseResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.LicenseError'
        "409":
          description: License with same shortname already exists
          schema:
            $ref: '#/definitions/models.LicenseError'
        "500":
          description: Failed to create license
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - ApiKeyAuth: []
      summary: Create a new license
      tags:
      - Licenses
  /licenses/{shortname}:
    get:
      consumes:
      - application/json
      description: Get a single license by its shortname
      operationId: GetLicense
      parameters:
      - description: Shortname of the license
        in: path
        name: shortname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LicenseResponse'
        "404":
          description: License with shortname not found
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - '{}': []
        ApiKeyAuth: []
      summary: Get a license by shortname
      tags:
      - Licenses
  /licenses/export:
    get:
      description: Export all licenses as a json file
      operationId: ExportLicenses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LicenseDB'
            type: array
        "500":
          description: Failed to fetch Licenses
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - '{}': []
        ApiKeyAuth: []
      summary: Export all licenses as a json file
      tags:
      - Licenses
  /licenses/import:
    post:
      consumes:
      - multipart/form-data
      description: Import licenses by uploading a json file
      operationId: ImportLicenses
      parameters:
      - description: licenses json file list
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.ImportLicensesResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.LicenseImportStatus'
                  type: array
              type: object
        "400":
          description: input file must be present
          schema:
            $ref: '#/definitions/models.LicenseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - ApiKeyAuth: []
      summary: Import licenses by uploading a json file
      tags:
      - Licenses
  /licenses/preview:
    get:
      consumes:
      - application/json
      description: Get shortnames of all active licenses from the service
      operationId: GetAllLicensePreviews
      parameters:
      - description: Active license only
        in: query
        name: active
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LicensePreviewResponse'
        "400":
          description: Invalid active value
          schema:
            $ref: '#/definitions/models.LicenseError'
        "500":
          description: Unable to fetch licenses
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - '{}': []
        ApiKeyAuth: []
      summary: Get shortnames of all active licenses
      tags:
      - Licenses
  /login:
    post:
      consumes:
      - application/json
      description: Login to get JWT token
      operationId: Login
      parameters:
      - description: Login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            properties:
              token:
                type: string
            type: object
        "401":
          description: Incorrect username or password
          schema:
            $ref: '#/definitions/models.LicenseError'
      summary: Login
      tags:
      - Users
  /obligation_maps/license/{license}:
    get:
      consumes:
      - application/json
      description: Get obligation maps for a given license shortname
      operationId: GetObligationMapByLicense
      parameters:
      - description: Shortname of the license
        in: path
        name: license
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ObligationMapResponse'
        "404":
          description: No license with given shortname found or no map for
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - '{}': []
        ApiKeyAuth: []
      summary: Get maps for a license
      tags:
      - Obligations
  /obligation_maps/topic/{topic}:
    get:
      consumes:
      - application/json
      description: Get obligation maps for a given obligation topic
      operationId: GetObligationMapByTopic
      parameters:
      - description: Topic of the obligation
        in: path
        name: topic
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ObligationMapResponse'
        "404":
          description: No obligation with given topic found or no map for
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - '{}': []
        ApiKeyAuth: []
      summary: Get maps for an obligation
      tags:
      - Obligations
  /obligation_maps/topic/{topic}/license:
    patch:
      consumes:
      - application/json
      description: Add or remove licenses from obligation map for a given obligation
        topic
      operationId: PatchObligationMap
      parameters:
      - description: Topic of the obligation
        in: path
        name: topic
        required: true
        type: string
      - description: Shortnames of the licenses with action
        in: body
        name: shortname
        required: true
        schema:
          $ref: '#/definitions/models.LicenseMapShortnamesInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ObligationMapResponse'
        "400":
          description: Invalid json body
          schema:
            $ref: '#/definitions/models.LicenseError'
        "404":
          description: No license or obligation found.
          schema:
            $ref: '#/definitions/models.LicenseError'
        "500":
          description: Failure to insert new maps
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - ApiKeyAuth: []
      summary: Add or remove licenses from obligation map
      tags:
      - Obligations
    put:
      consumes:
      - application/json
      description: Replaces the license list of an obligation topic with the given
        list in the obligation map.
      operationId: UpdateLicenseInObligationMap
      parameters:
      - description: Topic of the obligation
        in: path
        name: topic
        required: true
        type: string
      - description: Shortnames of the licenses to be in map
        in: body
        name: shortnames
        required: true
        schema:
          $ref: '#/definitions/models.LicenseShortnamesInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ObligationMapResponse'
        "400":
          description: Invalid json body
          schema:
            $ref: '#/definitions/models.LicenseError'
        "404":
          description: No license or obligation found.
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - ApiKeyAuth: []
      summary: Change license list
      tags:
      - Obligations
  /obligations:
    get:
      consumes:
      - application/json
      description: Get all active obligations from the service
      operationId: GetAllObligation
      parameters:
      - description: Active obligation only
        in: query
        name: active
        required: true
        type: boolean
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of records per page
        in: query
        name: limit
        type: integer
      - default: asc
        description: Asc or desc ordering
        enum:
        - asc
        - desc
        in: query
        name: order_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerObligationResponse'
        "404":
          description: No obligations in DB
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - '{}': []
        ApiKeyAuth: []
      summary: Get all active obligations
      tags:
      - Obligations
    post:
      consumes:
      - application/json
      description: Create an obligation and associate it with licenses
      operationId: CreateObligation
      parameters:
      - description: Obligation to create
        in: body
        name: obligation
        required: true
        schema:
          $ref: '#/definitions/models.ObligationDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SwaggerObligationResponse'
        "400":
          description: Bad request body
          schema:
            $ref: '#/definitions/models.LicenseError'
        "409":
          description: Obligation with same body exists
          schema:
            $ref: '#/definitions/models.LicenseError'
        "500":
          description: Unable to create obligation
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - ApiKeyAuth: []
      summary: Create an obligation
      tags:
      - Obligations
  /obligations/{topic}:
    delete:
      consumes:
      - application/json
      description: Deactivate an obligation
      operationId: DeleteObligation
      parameters:
      - description: Topic of the obligation to be updated
        in: path
        name: topic
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: No obligation with given topic found
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - ApiKeyAuth: []
      summary: Deactivate obligation
      tags:
      - Obligations
    get:
      consumes:
      - application/json
      description: Get an active based on given topic
      operationId: GetObligation
      parameters:
      - description: Topic of the obligation
        in: path
        name: topic
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerObligationResponse'
        "404":
          description: No obligation with given topic found
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - '{}': []
        ApiKeyAuth: []
      summary: Get an obligation
      tags:
      - Obligations
    patch:
      consumes:
      - application/json
      description: Update an existing obligation record
      operationId: UpdateObligation
      parameters:
      - description: Topic of the obligation to be updated
        in: path
        name: topic
        required: true
        type: string
      - description: Obligation to be updated
        in: body
        name: obligation
        required: true
        schema:
          $ref: '#/definitions/models.ObligationUpdateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerObligationResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/models.LicenseError'
        "404":
          description: No obligation with given topic found
          schema:
            $ref: '#/definitions/models.LicenseError'
        "500":
          description: Unable to update obligation
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - ApiKeyAuth: []
      summary: Update obligation
      tags:
      - Obligations
  /obligations/{topic}/audits:
    get:
      consumes:
      - application/json
      description: Fetches audits corresponding to an obligation
      operationId: GetObligationAudits
      parameters:
      - description: Topic of the obligation for which audits need to be fetched
        in: path
        name: topic
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of records per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuditResponse'
        "404":
          description: No obligation with given topic found
          schema:
            $ref: '#/definitions/models.LicenseError'
        "500":
          description: unable to find audits with such obligation topic
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - '{}': []
        ApiKeyAuth: []
      summary: Fetches audits corresponding to an obligation
      tags:
      - Obligations
  /obligations/classifications:
    get:
      consumes:
      - application/json
      description: Get all active obligation classifications from the service
      operationId: GetAllObligationClassification
      parameters:
      - description: Active obligation classification only
        in: query
        name: active
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ObligationClassificationResponse'
        "404":
          description: No obligation classifications in DB
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - '{}': []
        ApiKeyAuth: []
      summary: Get all active obligation classifications
      tags:
      - Obligations
    post:
      consumes:
      - application/json
      description: Create an obligation classification
      operationId: CreateObligationClassification
      parameters:
      - description: Obligation classification to create
        in: body
        name: obligation_classification
        required: true
        schema:
          $ref: '#/definitions/models.ObligationClassification'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ObligationClassificationResponse'
        "400":
          description: invalid json body
          schema:
            $ref: '#/definitions/models.LicenseError'
        "409":
          description: obligation classification already exists
          schema:
            $ref: '#/definitions/models.LicenseError'
        "500":
          description: something went wrong while creating new obligation classification
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - ApiKeyAuth: []
      summary: Create an obligation classification
      tags:
      - Obligations
  /obligations/classifications/{classification}:
    delete:
      consumes:
      - application/json
      description: Deactivate an obligation classification
      operationId: DeleteObligationClassification
      parameters:
      - description: Obligation Classification
        in: path
        name: classification
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: cannot delete obligation classification 'GREEN' as it's still
            referenced by some obligations
          schema:
            $ref: '#/definitions/models.LicenseError'
        "404":
          description: obligation classification 'GREEN' not found
          schema:
            $ref: '#/definitions/models.LicenseError'
        "500":
          description: something went wrong while deleting obligation classification
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - ApiKeyAuth: []
      summary: Deactivate obligation classification
      tags:
      - Obligations
  /obligations/export:
    get:
      description: Export all obligations as a json file
      operationId: ExportObligations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ObligationDTO'
            type: array
        "500":
          description: Failed to fetch obligations
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - '{}': []
        ApiKeyAuth: []
      summary: Export all obligations as a json file
      tags:
      - Obligations
  /obligations/import:
    post:
      consumes:
      - multipart/form-data
      description: Import obligations by uploading a json file
      operationId: ImportObligations
      parameters:
      - description: obligations json file list
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.ImportObligationsResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.ObligationImportStatus'
                  type: array
              type: object
        "400":
          description: input file must be present
          schema:
            $ref: '#/definitions/models.LicenseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - ApiKeyAuth: []
      summary: Import obligations by uploading a json file
      tags:
      - Obligations
  /obligations/preview:
    get:
      consumes:
      - application/json
      description: Get topic and type of all active obligations from the service
      operationId: GetAllObligationPreviews
      parameters:
      - description: Active obligation only
        in: query
        name: active
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ObligationPreviewResponse'
      security:
      - '{}': []
        ApiKeyAuth: []
      summary: Get topic and types of all active obligations
      tags:
      - Obligations
  /obligations/types:
    get:
      consumes:
      - application/json
      description: Get all active obligation types from the service
      operationId: GetAllObligationType
      parameters:
      - description: Active obligation type only
        in: query
        name: active
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ObligationTypeResponse'
        "404":
          description: No obligation types in DB
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - '{}': []
        ApiKeyAuth: []
      summary: Get all active obligation types
      tags:
      - Obligations
    post:
      consumes:
      - application/json
      description: Create an obligation type
      operationId: CreateObligationType
      parameters:
      - description: Obligation type to create
        in: body
        name: obligation_type
        required: true
        schema:
          $ref: '#/definitions/models.ObligationType'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ObligationTypeResponse'
        "400":
          description: invalid json body
          schema:
            $ref: '#/definitions/models.LicenseError'
        "409":
          description: obligation type already exists
          schema:
            $ref: '#/definitions/models.LicenseError'
        "500":
          description: something went wrong while creating new obligation type
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - ApiKeyAuth: []
      summary: Create an obligation type
      tags:
      - Obligations
  /obligations/types/{type}:
    delete:
      consumes:
      - application/json
      description: Deactivate an obligation type
      operationId: DeleteObligationType
      parameters:
      - description: Obligation Type
        in: path
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: cannot delete obligation type 'RISK' as it's still referenced
            by some obligations
          schema:
            $ref: '#/definitions/models.LicenseError'
        "404":
          description: obligation type 'RISK' not found
          schema:
            $ref: '#/definitions/models.LicenseError'
        "500":
          description: something went wrong while deleting obligation type
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - ApiKeyAuth: []
      summary: Deactivate obligation type
      tags:
      - Obligations
  /search:
    post:
      consumes:
      - application/json
      description: Search licenses on different filters and algorithms
      operationId: SearchInLicense
      parameters:
      - description: Search criteria
        in: body
        name: search
        required: true
        schema:
          $ref: '#/definitions/models.SearchLicense'
      produces:
      - application/json
      responses:
        "200":
          description: Licenses matched
          schema:
            $ref: '#/definitions/models.LicenseResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/models.LicenseError'
        "404":
          description: Search algorithm doesn't exist
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - '{}': []
        ApiKeyAuth: []
      summary: Search licenses
      tags:
      - Licenses
  /users:
    get:
      consumes:
      - application/json
      description: Get all service users
      operationId: GetAllUsers
      parameters:
      - description: Active user only
        in: query
        name: active
        type: boolean
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of records per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "404":
          description: Users not found
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - ApiKeyAuth: []
      summary: Get users
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Users can update their profile using this endpoint
      operationId: UpdateProfile
      parameters:
      - description: Profile fields to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.ProfileUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Invalid json body
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - ApiKeyAuth: []
      summary: Users can update their profile using this endpoint
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new service user
      operationId: CreateUser
      parameters:
      - description: User to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Invalid json body
          schema:
            $ref: '#/definitions/models.LicenseError'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - ApiKeyAuth: []
      summary: Create new user
      tags:
      - Users
  /users/{username}:
    delete:
      consumes:
      - application/json
      description: Deactivate an user
      operationId: DeleteUser
      parameters:
      - description: Username of the user to be marked as inactive
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: No user with given username found
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - ApiKeyAuth: []
      summary: Deactivate user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get a single user by username
      operationId: GetUser
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Invalid user id
          schema:
            $ref: '#/definitions/models.LicenseError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - ApiKeyAuth: []
      summary: Get a user
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Update a service user, requires admin rights
      operationId: UpdateUser
      parameters:
      - description: username of the user to be updated
        in: path
        name: username
        required: true
        type: string
      - description: User to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Invalid json body
          schema:
            $ref: '#/definitions/models.LicenseError'
        "403":
          description: This resource requires elevated access rights
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - ApiKeyAuth: []
      summary: Update user, requires admin rights
      tags:
      - Users
  /users/oidc:
    post:
      consumes:
      - application/json
      description: Create a new service user via oidc id token
      operationId: CreateOidcUser
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Invalid json body
          schema:
            $ref: '#/definitions/models.LicenseError'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/models.LicenseError'
      summary: Create new user via oidc id token
      tags:
      - Users
  /users/profile:
    get:
      consumes:
      - application/json
      description: Get user's own profile
      operationId: GetUserProfile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Invalid user
          schema:
            $ref: '#/definitions/models.LicenseError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.LicenseError'
      security:
      - ApiKeyAuth: []
      summary: Get user's own profile
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    description: Token from /login endpoint. Enter the token with the `Bearer ` prefix,
      e.g. \"Bearer eyJhbGciOiJ.....\"
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
