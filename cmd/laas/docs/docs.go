// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "FOSSology",
            "url": "https://fossology.org",
            "email": "fossology@fossology.org"
        },
        "license": {
            "name": "GPL-2.0-only",
            "url": "https://github.com/fossology/LicenseDb/blob/main/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/apiCollection": {
            "get": {
                "description": "Returns the apis which require authentication and which do not",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "API Collection"
                ],
                "summary": "Returns the apis which require authentication and which do not",
                "operationId": "getAPICollection",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.APICollectionResponse"
                        }
                    },
                    "500": {
                        "description": "Unable to parse swagger docs",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/audits": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": [],
                        "{}": []
                    }
                ],
                "description": "Get all audit records from the server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Audits"
                ],
                "summary": "Get audit records",
                "operationId": "GetAllAudit",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of records per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Audit records",
                        "schema": {
                            "$ref": "#/definitions/models.AuditResponse"
                        }
                    },
                    "404": {
                        "description": "Not changelogs in DB",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/audits/{audit_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": [],
                        "{}": []
                    }
                ],
                "description": "Get a specific audit records by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Audits"
                ],
                "summary": "Get an audit record",
                "operationId": "GetAudit",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Audit ID",
                        "name": "audit_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AuditResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid audit ID",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "404": {
                        "description": "No audit entry with given ID",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/audits/{audit_id}/changes": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": [],
                        "{}": []
                    }
                ],
                "description": "Get changelogs of an audit record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Audits"
                ],
                "summary": "Get changelogs",
                "operationId": "GetChangeLogs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Audit ID",
                        "name": "audit_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ChangeLogResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid audit ID",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "404": {
                        "description": "No audit entry with given ID",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "500": {
                        "description": "unable to find changes",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/audits/{audit_id}/changes/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": [],
                        "{}": []
                    }
                ],
                "description": "Get a specific changelog of an audit record by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Audits"
                ],
                "summary": "Get a changelog",
                "operationId": "GetChangeLogbyId",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Audit ID",
                        "name": "audit_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Changelog ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ChangeLogResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "404": {
                        "description": "No changelog with given ID found",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/dashboard": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": [],
                        "{}": []
                    }
                ],
                "description": "Fetches data to be displayed on the dashboard",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Fetches data to be displayed on the dashboard",
                "operationId": "GetDashboardData",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.DashboardResponse"
                        }
                    },
                    "500": {
                        "description": "Something went wrong",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Check health of the service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Check health",
                "operationId": "getHealth",
                "responses": {
                    "200": {
                        "description": "Heath is OK",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "500": {
                        "description": "Connection to DB failed",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/licenses": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": [],
                        "{}": []
                    }
                ],
                "description": "Filter licenses based on different parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licenses"
                ],
                "summary": "Filter licenses",
                "operationId": "FilterLicense",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SPDX ID of the license",
                        "name": "spdxid",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Active license only",
                        "name": "active",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OSI Approved flag status of license",
                        "name": "osiapproved",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Copyleft flag status of license",
                        "name": "copyleft",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit of responses per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "External reference parameters",
                        "name": "externalRef",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "spdx_id",
                            "shortname",
                            "fullname"
                        ],
                        "type": "string",
                        "default": "shortname",
                        "description": "Sort by field",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "asc",
                        "description": "Asc or desc ordering",
                        "name": "order_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Filtered licenses",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid value",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new license in the service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licenses"
                ],
                "summary": "Create a new license",
                "operationId": "CreateLicense",
                "parameters": [
                    {
                        "description": "New license to be created",
                        "name": "license",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LicenseCreateDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "New license created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "409": {
                        "description": "License with same shortname already exists",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "500": {
                        "description": "Failed to create license",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/licenses/export": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": [],
                        "{}": []
                    }
                ],
                "description": "Export all licenses as a json file",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licenses"
                ],
                "summary": "Export all licenses as a json file",
                "operationId": "ExportLicenses",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.LicenseResponseDTO"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to fetch Licenses",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/licenses/import": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Import licenses by uploading a json file",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licenses"
                ],
                "summary": "Import licenses by uploading a json file",
                "operationId": "ImportLicenses",
                "parameters": [
                    {
                        "type": "file",
                        "description": "licenses json file list",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.ImportLicensesResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.LicenseImportStatus"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "input file must be present",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/licenses/preview": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": [],
                        "{}": []
                    }
                ],
                "description": "Get shortnames of all active licenses from the service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licenses"
                ],
                "summary": "Get shortnames of all active licenses",
                "operationId": "GetAllLicensePreviews",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Active license only",
                        "name": "active",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.LicensePreviewResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid active value",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "500": {
                        "description": "Unable to fetch licenses",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/licenses/similarity": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Compares input license text with existing ones using pg_trgm similarity",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licenses"
                ],
                "summary": "Find similar license texts",
                "operationId": "getSimilarLicense",
                "parameters": [
                    {
                        "description": "Input license text to compare",
                        "name": "license",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SimilarityRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of similar licenses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SimilarLicense"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request or query failed",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/licenses/{shortname}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": [],
                        "{}": []
                    }
                ],
                "description": "Get a single license by its shortname",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licenses"
                ],
                "summary": "Get a license by shortname",
                "operationId": "GetLicense",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Shortname of the license",
                        "name": "shortname",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseResponse"
                        }
                    },
                    "404": {
                        "description": "License with shortname not found",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update a license in the service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licenses"
                ],
                "summary": "Update a license",
                "operationId": "UpdateLicense",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Shortname of the license to be updated",
                        "name": "shortname",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update license body (requires only the fields to be updated)",
                        "name": "license",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LicenseUpdateDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "License updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid license body",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "404": {
                        "description": "License with shortname not found",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "409": {
                        "description": "License with same shortname already exists",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "500": {
                        "description": "Failed to update license",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Login to get JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Login",
                "operationId": "Login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "token": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Incorrect username or password",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/obligation_maps/license/{license}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": [],
                        "{}": []
                    }
                ],
                "description": "Get obligation maps for a given license shortname",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Obligations"
                ],
                "summary": "Get maps for a license",
                "operationId": "GetObligationMapByLicense",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Shortname of the license",
                        "name": "license",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ObligationMapResponse"
                        }
                    },
                    "404": {
                        "description": "No license with given shortname found or no map for",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/obligation_maps/topic/{topic}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": [],
                        "{}": []
                    }
                ],
                "description": "Get obligation maps for a given obligation topic",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Obligations"
                ],
                "summary": "Get maps for an obligation",
                "operationId": "GetObligationMapByTopic",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic of the obligation",
                        "name": "topic",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ObligationMapResponse"
                        }
                    },
                    "404": {
                        "description": "No obligation with given topic found or no map for",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/obligation_maps/topic/{topic}/license": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Replaces the license list of an obligation topic with the given list in the obligation map.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Obligations"
                ],
                "summary": "Change license list",
                "operationId": "UpdateLicenseInObligationMap",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic of the obligation",
                        "name": "topic",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Shortnames of the licenses to be in map",
                        "name": "shortnames",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LicenseShortnamesInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ObligationMapResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid json body",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "404": {
                        "description": "No license or obligation found.",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add or remove licenses from obligation map for a given obligation topic",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Obligations"
                ],
                "summary": "Add or remove licenses from obligation map",
                "operationId": "PatchObligationMap",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic of the obligation",
                        "name": "topic",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Shortnames of the licenses with action",
                        "name": "shortname",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LicenseMapShortnamesInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ObligationMapResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid json body",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "404": {
                        "description": "No license or obligation found.",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "500": {
                        "description": "Failure to insert new maps",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/obligations": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": [],
                        "{}": []
                    }
                ],
                "description": "Get all active obligations from the service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Obligations"
                ],
                "summary": "Get all active obligations",
                "operationId": "GetAllObligation",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Active obligation only",
                        "name": "active",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of records per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "asc",
                        "description": "Asc or desc ordering",
                        "name": "order_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerObligationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid active value",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create an obligation and associate it with licenses",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Obligations"
                ],
                "summary": "Create an obligation",
                "operationId": "CreateObligation",
                "parameters": [
                    {
                        "description": "Obligation to create",
                        "name": "obligation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ObligationDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerObligationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request body",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "409": {
                        "description": "Obligation with same body exists",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "500": {
                        "description": "Unable to create obligation",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/obligations/classifications": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": [],
                        "{}": []
                    }
                ],
                "description": "Get all active obligation classifications from the service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Obligations"
                ],
                "summary": "Get all active obligation classifications",
                "operationId": "GetAllObligationClassification",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Active obligation classification only",
                        "name": "active",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ObligationClassificationResponse"
                        }
                    },
                    "404": {
                        "description": "No obligation classifications in DB",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create an obligation classification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Obligations"
                ],
                "summary": "Create an obligation classification",
                "operationId": "CreateObligationClassification",
                "parameters": [
                    {
                        "description": "Obligation classification to create",
                        "name": "obligation_classification",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ObligationClassification"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.ObligationClassificationResponse"
                        }
                    },
                    "400": {
                        "description": "invalid json body",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "409": {
                        "description": "obligation classification already exists",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "500": {
                        "description": "something went wrong while creating new obligation classification",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/obligations/classifications/{classification}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deactivate an obligation classification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Obligations"
                ],
                "summary": "Deactivate obligation classification",
                "operationId": "DeleteObligationClassification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Obligation Classification",
                        "name": "classification",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "cannot delete obligation classification 'GREEN' as it's still referenced by some obligations",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "404": {
                        "description": "obligation classification 'GREEN' not found",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "500": {
                        "description": "something went wrong while deleting obligation classification",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/obligations/export": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": [],
                        "{}": []
                    }
                ],
                "description": "Export all obligations as a json file",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Obligations"
                ],
                "summary": "Export all obligations as a json file",
                "operationId": "ExportObligations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ObligationDTO"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to fetch obligations",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/obligations/import": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Import obligations by uploading a json file",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Obligations"
                ],
                "summary": "Import obligations by uploading a json file",
                "operationId": "ImportObligations",
                "parameters": [
                    {
                        "type": "file",
                        "description": "obligations json file list",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.ImportObligationsResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.ObligationImportStatus"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "input file must be present",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/obligations/preview": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": [],
                        "{}": []
                    }
                ],
                "description": "Get topic and type of all active obligations from the service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Obligations"
                ],
                "summary": "Get topic and types of all active obligations",
                "operationId": "GetAllObligationPreviews",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Active obligation only",
                        "name": "active",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ObligationPreviewResponse"
                        }
                    }
                }
            }
        },
        "/obligations/similarity": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the top 5 obligations with text similar to the input using pg_trgm",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Obligations"
                ],
                "summary": "Find similar obligations",
                "operationId": "getSimilarObligation",
                "parameters": [
                    {
                        "description": "Text to compare against stored obligations",
                        "name": "obligation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SimilarityRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Similar obligations found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SimilarObligation"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input or database query failure",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "500": {
                        "description": "Unexpected server error",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/obligations/types": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": [],
                        "{}": []
                    }
                ],
                "description": "Get all active obligation types from the service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Obligations"
                ],
                "summary": "Get all active obligation types",
                "operationId": "GetAllObligationType",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Active obligation type only",
                        "name": "active",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ObligationTypeResponse"
                        }
                    },
                    "404": {
                        "description": "No obligation types in DB",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create an obligation type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Obligations"
                ],
                "summary": "Create an obligation type",
                "operationId": "CreateObligationType",
                "parameters": [
                    {
                        "description": "Obligation type to create",
                        "name": "obligation_type",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ObligationType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.ObligationTypeResponse"
                        }
                    },
                    "400": {
                        "description": "invalid json body",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "409": {
                        "description": "obligation type already exists",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "500": {
                        "description": "something went wrong while creating new obligation type",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/obligations/types/{type}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deactivate an obligation type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Obligations"
                ],
                "summary": "Deactivate obligation type",
                "operationId": "DeleteObligationType",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Obligation Type",
                        "name": "type",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "cannot delete obligation type 'RISK' as it's still referenced by some obligations",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "404": {
                        "description": "obligation type 'RISK' not found",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "500": {
                        "description": "something went wrong while deleting obligation type",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/obligations/{topic}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": [],
                        "{}": []
                    }
                ],
                "description": "Get an active based on given topic",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Obligations"
                ],
                "summary": "Get an obligation",
                "operationId": "GetObligation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic of the obligation",
                        "name": "topic",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerObligationResponse"
                        }
                    },
                    "404": {
                        "description": "No obligation with given topic found",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deactivate an obligation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Obligations"
                ],
                "summary": "Deactivate obligation",
                "operationId": "DeleteObligation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic of the obligation to be updated",
                        "name": "topic",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "No obligation with given topic found",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an existing obligation record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Obligations"
                ],
                "summary": "Update obligation",
                "operationId": "UpdateObligation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic of the obligation to be updated",
                        "name": "topic",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Obligation to be updated",
                        "name": "obligation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ObligationUpdateDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerObligationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "404": {
                        "description": "No obligation with given topic found",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "500": {
                        "description": "Unable to update obligation",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/obligations/{topic}/audits": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": [],
                        "{}": []
                    }
                ],
                "description": "Fetches audits corresponding to an obligation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Obligations"
                ],
                "summary": "Fetches audits corresponding to an obligation",
                "operationId": "GetObligationAudits",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic of the obligation for which audits need to be fetched",
                        "name": "topic",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of records per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AuditResponse"
                        }
                    },
                    "404": {
                        "description": "No obligation with given topic found",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "500": {
                        "description": "unable to find audits with such obligation topic",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/oidcClients": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all oidc clients added by the user for initiating M2M flow with fossology",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OIDC Clients"
                ],
                "summary": "Get all oidc clients added by the user",
                "operationId": "GetUserOidcClients",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.OidcClientsResponse"
                        }
                    },
                    "500": {
                        "description": "Something went wrong",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add a new client for initiating M2M flow with fossology",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OIDC Clients"
                ],
                "summary": "Adds a new oidc client",
                "operationId": "CreateOidcClient",
                "parameters": [
                    {
                        "description": "Oidc client to add",
                        "name": "oidc_client",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateDeleteOidcClientDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.OidcClientsResponse"
                        }
                    },
                    "400": {
                        "description": "invalid json body",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "409": {
                        "description": "oidc client already exists",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "500": {
                        "description": "something went wrong while adding new oidc client",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Remove an oidc client if it gets expired or is compromised",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OIDC Clients"
                ],
                "summary": "Remove an oidc client",
                "operationId": "RevokeClient",
                "parameters": [
                    {
                        "description": "Oidc client to add",
                        "name": "oidc_client",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateDeleteOidcClientDTO"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Oidc Client not found",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/search": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": [],
                        "{}": []
                    }
                ],
                "description": "Search licenses on different filters and algorithms",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Licenses"
                ],
                "summary": "Search licenses",
                "operationId": "SearchInLicense",
                "parameters": [
                    {
                        "description": "Search criteria",
                        "name": "search",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SearchLicense"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Licenses matched",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "404": {
                        "description": "Search algorithm doesn't exist",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all service users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get users",
                "operationId": "GetAllUsers",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Active user only",
                        "name": "active",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of records per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "404": {
                        "description": "Users not found",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new service user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create new user",
                "operationId": "CreateUser",
                "parameters": [
                    {
                        "description": "User to create",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid json body",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Users can update their profile using this endpoint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Users can update their profile using this endpoint",
                "operationId": "UpdateProfile",
                "parameters": [
                    {
                        "description": "Profile fields to update",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ProfileUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid json body",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/users/oidc": {
            "post": {
                "description": "Create a new service user via oidc id token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create new user via oidc id token",
                "operationId": "CreateOidcUser",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid json body",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/users/profile": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get user's own profile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user's own profile",
                "operationId": "GetUserProfile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        },
        "/users/{username}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a single user by username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a user",
                "operationId": "GetUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user id",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deactivate an user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Deactivate user",
                "operationId": "DeleteUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the user to be marked as inactive",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "No user with given username found",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update a service user, requires admin rights",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user, requires admin rights",
                "operationId": "UpdateUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username of the user to be updated",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User to update",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid json body",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    },
                    "403": {
                        "description": "This resource requires elevated access rights",
                        "schema": {
                            "$ref": "#/definitions/models.LicenseError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "datatypes.JSONType-models_LicenseDBSchemaExtension": {
            "type": "object"
        },
        "models.APICollection": {
            "type": "object",
            "properties": {
                "authenticated": {
                    "type": "object"
                },
                "unAuthenticated": {
                    "type": "object"
                }
            }
        },
        "models.APICollectionResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.APICollection"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.Audit": {
            "type": "object",
            "properties": {
                "entity": {
                    "type": "object"
                },
                "id": {
                    "type": "integer",
                    "example": 456
                },
                "timestamp": {
                    "type": "string",
                    "example": "2023-12-01T18:10:25.00+05:30"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "OBLIGATION",
                        "LICENSE",
                        "USER"
                    ],
                    "example": "LICENSE"
                },
                "type_id": {
                    "type": "integer",
                    "example": 34
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "user_id": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "models.AuditResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Audit"
                    }
                },
                "paginationmeta": {
                    "$ref": "#/definitions/models.PaginationMeta"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.CategoryObligationCount": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string",
                    "example": "GENERAL"
                },
                "count": {
                    "type": "integer",
                    "example": 6
                }
            }
        },
        "models.ChangeLog": {
            "type": "object",
            "properties": {
                "audit_id": {
                    "type": "integer",
                    "example": 456
                },
                "field": {
                    "type": "string",
                    "example": "text"
                },
                "id": {
                    "type": "integer",
                    "example": 789
                },
                "old_value": {
                    "type": "string",
                    "example": "Old license text"
                },
                "updated_value": {
                    "type": "string",
                    "example": "New license text"
                }
            }
        },
        "models.ChangeLogResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ChangeLog"
                    }
                },
                "paginationmeta": {
                    "$ref": "#/definitions/models.PaginationMeta"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.CreateDeleteOidcClientDTO": {
            "type": "object",
            "required": [
                "clientId"
            ],
            "properties": {
                "clientId": {
                    "type": "string",
                    "example": "qwerty"
                }
            }
        },
        "models.Dashboard": {
            "type": "object",
            "properties": {
                "category_obligation_frequency": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CategoryObligationCount"
                    }
                },
                "licenses_count": {
                    "type": "integer",
                    "example": 2
                },
                "monthly_license_changes_count": {
                    "type": "integer",
                    "example": 6
                },
                "obligations_count": {
                    "type": "integer",
                    "example": 7
                },
                "risk_license_frequency": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RiskLicenseCount"
                    }
                },
                "users_count": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "models.DashboardResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Dashboard"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.ImportLicensesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "can be of type models.LicenseError or models.LicenseImportStatus",
                    "type": "array",
                    "items": {}
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.ImportObligationsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "can be of type models.LicenseError or models.ObligationImportStatus",
                    "type": "array",
                    "items": {}
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.LicenseCreateDTO": {
            "type": "object",
            "required": [
                "fullname",
                "shortname",
                "spdx_id",
                "text"
            ],
            "properties": {
                "OSIapproved": {
                    "type": "boolean"
                },
                "active": {
                    "type": "boolean"
                },
                "copyleft": {
                    "type": "boolean"
                },
                "external_ref": {
                    "$ref": "#/definitions/models.LicenseDBSchemaExtension"
                },
                "fullname": {
                    "type": "string",
                    "example": "MIT License"
                },
                "notes": {
                    "type": "string",
                    "example": "This license has been superseded."
                },
                "obligations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "risk": {
                    "type": "integer",
                    "maximum": 5,
                    "minimum": 0,
                    "example": 1
                },
                "shortname": {
                    "type": "string",
                    "example": "MIT"
                },
                "source": {
                    "type": "string"
                },
                "spdx_id": {
                    "type": "string",
                    "example": "MIT"
                },
                "text": {
                    "type": "string",
                    "example": "MIT License Text here"
                },
                "text_updatable": {
                    "type": "boolean"
                },
                "url": {
                    "type": "string",
                    "example": "https://opensource.org/licenses/MIT"
                }
            }
        },
        "models.LicenseDB": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "addDate": {
                    "type": "string"
                },
                "copyleft": {
                    "type": "boolean"
                },
                "externalRef": {
                    "$ref": "#/definitions/datatypes.JSONType-models_LicenseDBSchemaExtension"
                },
                "fullname": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "notes": {
                    "type": "string"
                },
                "obligations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Obligation"
                    }
                },
                "osiapproved": {
                    "type": "boolean"
                },
                "risk": {
                    "type": "integer"
                },
                "shortname": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "spdxId": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "textSetBy": {
                    "type": "integer"
                },
                "textUpdatable": {
                    "type": "boolean"
                },
                "url": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userId": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.LicenseDBSchemaExtension": {
            "type": "object"
        },
        "models.LicenseError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "invalid request body"
                },
                "message": {
                    "type": "string",
                    "example": "invalid request body"
                },
                "path": {
                    "type": "string",
                    "example": "/api/v1/licenses"
                },
                "status": {
                    "type": "integer",
                    "example": 400
                },
                "timestamp": {
                    "type": "string",
                    "example": "2023-12-01T10:00:51+05:30"
                }
            }
        },
        "models.LicenseImportStatus": {
            "type": "object",
            "properties": {
                "shortname": {
                    "type": "string",
                    "example": "MIT"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.LicenseMapShortnamesElement": {
            "type": "object",
            "properties": {
                "add": {
                    "type": "boolean",
                    "example": true
                },
                "shortname": {
                    "type": "string",
                    "example": "GPL-2.0-only"
                }
            }
        },
        "models.LicenseMapShortnamesInput": {
            "type": "object",
            "properties": {
                "map": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.LicenseMapShortnamesElement"
                    }
                }
            }
        },
        "models.LicensePreviewResponse": {
            "type": "object",
            "properties": {
                "shortnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "GPL-2.0-only",
                        "GPL-2.0-or-later"
                    ]
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.LicenseResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.LicenseResponseDTO"
                    }
                },
                "paginationmeta": {
                    "$ref": "#/definitions/models.PaginationMeta"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.LicenseResponseDTO": {
            "type": "object",
            "properties": {
                "OSIapproved": {
                    "type": "boolean"
                },
                "active": {
                    "type": "boolean"
                },
                "add_date": {
                    "type": "string"
                },
                "copyleft": {
                    "type": "boolean"
                },
                "created_by": {
                    "$ref": "#/definitions/models.User"
                },
                "external_ref": {
                    "$ref": "#/definitions/models.LicenseDBSchemaExtension"
                },
                "fullname": {
                    "type": "string",
                    "example": "MIT License"
                },
                "notes": {
                    "type": "string",
                    "example": "This license has been superseded."
                },
                "obligations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "risk": {
                    "type": "integer",
                    "example": 1
                },
                "shortname": {
                    "type": "string",
                    "example": "MIT"
                },
                "source": {
                    "type": "string"
                },
                "spdx_id": {
                    "type": "string",
                    "example": "MIT"
                },
                "text": {
                    "type": "string",
                    "example": "MIT License Text here"
                },
                "text_updatable": {
                    "type": "boolean"
                },
                "url": {
                    "type": "string",
                    "example": "https://opensource.org/licenses/MIT"
                }
            }
        },
        "models.LicenseShortnamesInput": {
            "type": "object",
            "properties": {
                "shortnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "GPL-2.0-only",
                        "GPL-2.0-or-later"
                    ]
                }
            }
        },
        "models.LicenseUpdateDTO": {
            "type": "object",
            "properties": {
                "OSIapproved": {
                    "type": "boolean",
                    "example": false
                },
                "active": {
                    "type": "boolean",
                    "example": true
                },
                "copyleft": {
                    "type": "boolean",
                    "example": false
                },
                "external_ref": {
                    "type": "object",
                    "additionalProperties": true
                },
                "fullname": {
                    "type": "string",
                    "example": "MIT License"
                },
                "notes": {
                    "type": "string",
                    "example": "This license has been superseded."
                },
                "obligations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Obligation"
                    }
                },
                "risk": {
                    "type": "integer",
                    "maximum": 5,
                    "minimum": 0,
                    "example": 1
                },
                "source": {
                    "type": "string",
                    "example": "Source"
                },
                "spdx_id": {
                    "type": "string",
                    "example": "MIT"
                },
                "text": {
                    "type": "string",
                    "example": "MIT License Text here"
                },
                "text_updatable": {
                    "type": "boolean",
                    "example": false
                },
                "url": {
                    "type": "string",
                    "example": "https://opensource.org/licenses/MIT"
                }
            }
        },
        "models.Obligation": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string",
                    "enum": [
                        "DISTRIBUTION",
                        "PATENT",
                        "INTERNAL",
                        "CONTRACTUAL",
                        "EXPORT_CONTROL",
                        "GENERAL"
                    ],
                    "example": "DISTRIBUTION"
                },
                "classification": {
                    "$ref": "#/definitions/models.ObligationClassification"
                },
                "comment": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "licenses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.LicenseDB"
                    }
                },
                "md5": {
                    "type": "string"
                },
                "modifications": {
                    "type": "boolean"
                },
                "obligationClassificationId": {
                    "type": "integer"
                },
                "obligationTypeId": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                },
                "textUpdatable": {
                    "type": "boolean"
                },
                "topic": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.ObligationType"
                }
            }
        },
        "models.ObligationClassification": {
            "type": "object",
            "required": [
                "classification",
                "color"
            ],
            "properties": {
                "classification": {
                    "type": "string",
                    "example": "GREEN"
                },
                "color": {
                    "type": "string",
                    "example": "#00FF00"
                }
            }
        },
        "models.ObligationClassificationResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ObligationClassification"
                    }
                },
                "paginationmeta": {
                    "$ref": "#/definitions/models.PaginationMeta"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.ObligationDTO": {
            "type": "object",
            "required": [
                "category",
                "classification",
                "shortnames",
                "text",
                "topic",
                "type"
            ],
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string",
                    "example": "DISTRIBUTION"
                },
                "classification": {
                    "type": "string",
                    "example": "GREEN"
                },
                "comment": {
                    "type": "string"
                },
                "modifications": {
                    "type": "boolean",
                    "example": true
                },
                "shortnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "GPL-2.0-only",
                        "GPL-2.0-or-later"
                    ]
                },
                "text": {
                    "type": "string",
                    "example": "Source code be made available when distributing the software."
                },
                "text_updatable": {
                    "type": "boolean",
                    "example": true
                },
                "topic": {
                    "type": "string",
                    "example": "copyleft"
                },
                "type": {
                    "type": "string",
                    "example": "RISK"
                }
            }
        },
        "models.ObligationId": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 31
                },
                "topic": {
                    "type": "string",
                    "example": "copyleft"
                }
            }
        },
        "models.ObligationImportStatus": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.ObligationId"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.ObligationMapResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ObligationMapUser"
                    }
                },
                "paginationmeta": {
                    "$ref": "#/definitions/models.PaginationMeta"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.ObligationMapUser": {
            "type": "object",
            "properties": {
                "shortnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "GPL-2.0-only",
                        "GPL-2.0-or-later"
                    ]
                },
                "topic": {
                    "type": "string",
                    "example": "copyleft"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "obligation",
                        "restriction",
                        "risk",
                        "right"
                    ],
                    "example": "obligation"
                }
            }
        },
        "models.ObligationPreview": {
            "type": "object",
            "properties": {
                "topic": {
                    "type": "string",
                    "example": "Provide Copyright Notices"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "obligation",
                        "restriction",
                        "risk",
                        "right"
                    ]
                }
            }
        },
        "models.ObligationPreviewResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ObligationPreview"
                    }
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.ObligationType": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "type": {
                    "type": "string",
                    "example": "PERMISSION"
                }
            }
        },
        "models.ObligationTypeResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ObligationType"
                    }
                },
                "paginationmeta": {
                    "$ref": "#/definitions/models.PaginationMeta"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.ObligationUpdateDTO": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string",
                    "example": "DISTRIBUTION"
                },
                "classification": {
                    "type": "string",
                    "example": "GREEN"
                },
                "comment": {
                    "type": "string"
                },
                "modifications": {
                    "type": "boolean",
                    "example": true
                },
                "text": {
                    "type": "string",
                    "example": "Source code be made available when distributing the software."
                },
                "text_updatable": {
                    "type": "boolean",
                    "example": true
                },
                "type": {
                    "type": "string",
                    "example": "RISK"
                }
            }
        },
        "models.OidcClientDTO": {
            "type": "object",
            "properties": {
                "add_date": {
                    "type": "string"
                },
                "client_id": {
                    "type": "string",
                    "example": "qwerty"
                },
                "id": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "models.OidcClientsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.OidcClientDTO"
                    }
                },
                "paginationmeta": {
                    "$ref": "#/definitions/models.PaginationMeta"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.PaginationMeta": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "next": {
                    "type": "string",
                    "example": "/api/v1/licenses?limit=10\u0026page=11"
                },
                "page": {
                    "type": "integer",
                    "example": 10
                },
                "previous": {
                    "type": "string",
                    "example": "/api/v1/licenses?limit=10\u0026page=9"
                },
                "resource_count": {
                    "type": "integer",
                    "example": 200
                },
                "total_pages": {
                    "type": "integer",
                    "example": 20
                }
            }
        },
        "models.ProfileUpdate": {
            "type": "object",
            "properties": {
                "display_name": {
                    "type": "string",
                    "example": "fossy"
                },
                "user_email": {
                    "type": "string"
                },
                "user_password": {
                    "type": "string"
                }
            }
        },
        "models.RiskLicenseCount": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 6
                },
                "risk": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "models.SearchLicense": {
            "type": "object",
            "required": [
                "field",
                "search_term"
            ],
            "properties": {
                "field": {
                    "type": "string",
                    "example": "text"
                },
                "search": {
                    "type": "string",
                    "enum": [
                        "fuzzy",
                        "full_text_search"
                    ]
                },
                "search_term": {
                    "type": "string",
                    "example": "MIT License"
                }
            }
        },
        "models.SimilarLicense": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 123
                },
                "shortname": {
                    "type": "string",
                    "example": "MIT"
                },
                "similarity": {
                    "type": "number"
                },
                "text": {
                    "type": "string",
                    "example": "MIT License Text here"
                }
            }
        },
        "models.SimilarObligation": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 123
                },
                "similarity": {
                    "type": "number"
                },
                "text": {
                    "type": "string",
                    "example": "obligation text here"
                },
                "topic": {
                    "type": "string",
                    "example": "MIT license"
                }
            }
        },
        "models.SimilarityRequest": {
            "type": "object",
            "required": [
                "text"
            ],
            "properties": {
                "text": {
                    "type": "string"
                }
            }
        },
        "models.SwaggerObligationResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ObligationDTO"
                    }
                },
                "paginationmeta": {
                    "$ref": "#/definitions/models.PaginationMeta"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "display_name": {
                    "type": "string",
                    "example": "fossy"
                },
                "id": {
                    "type": "integer",
                    "example": 123
                },
                "user_email": {
                    "type": "string",
                    "example": "fossy@org.com"
                },
                "user_level": {
                    "type": "string",
                    "example": "USER"
                },
                "user_name": {
                    "type": "string",
                    "example": "fossy"
                }
            }
        },
        "models.UserCreate": {
            "type": "object",
            "required": [
                "display_name",
                "user_email",
                "user_level",
                "user_name"
            ],
            "properties": {
                "display_name": {
                    "type": "string",
                    "example": "fossy"
                },
                "user_email": {
                    "type": "string",
                    "example": "fossy@org.com"
                },
                "user_level": {
                    "type": "string",
                    "enum": [
                        "USER",
                        "ADMIN"
                    ],
                    "example": "ADMIN"
                },
                "user_name": {
                    "type": "string",
                    "example": "fossy"
                },
                "user_password": {
                    "type": "string",
                    "example": "fossy"
                }
            }
        },
        "models.UserLogin": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "fossy"
                },
                "username": {
                    "type": "string",
                    "example": "fossy"
                }
            }
        },
        "models.UserResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                },
                "paginationmeta": {
                    "$ref": "#/definitions/models.PaginationMeta"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "models.UserUpdate": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "display_name": {
                    "type": "string",
                    "example": "fossy"
                },
                "user_email": {
                    "type": "string"
                },
                "user_level": {
                    "type": "string",
                    "enum": [
                        "USER",
                        "ADMIN"
                    ],
                    "example": "ADMIN"
                },
                "user_name": {
                    "type": "string",
                    "example": "fossy"
                },
                "user_password": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Token from /login endpoint. Enter the token with the ` + "`" + `Bearer ` + "`" + ` prefix, e.g. \\\"Bearer eyJhbGciOiJ.....\\\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.9",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "laas (License as a Service) API",
	Description:      "Service to host license information for other services to query over REST API.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
